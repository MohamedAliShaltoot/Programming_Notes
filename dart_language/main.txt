# Dart Language Notes :

1) Casting in Dart

  1- if number is var x =10;
     var y = x.toDouble();
     var y = x.toString();
     and so on

  2- but if was a string like var x ="10";
     var y = num.parse(x);   

 2) Checking the values in Dart    

  1- if value is var x ="ali";
     var y = x ?? "Guest"; // here y = ali

     but if 
     var x =null;
     var y = x ?? "Guest"; // here y = Guest

 3) Naming a loop in Dart    

   ali:

   for(){

    mohamed:

    for(){


   if reached to a specified condition break ali;
    }
   }
   why? to stop the outer loop from inner loop

  4) Random() in Dart 
     import 'dart:math'; 

     var x = Random().nextInt(7); // 7 here is the max number he can reach
    print(x);
  
 5) Lists in Dart 

         void main() {
      var list =[4,7,6,3,43,4343];
      print("first approach");
      list.forEach((i){
         print(i);
      });
         print("\n \n");
      print("second approach");
         for(var i in list){
         print(i); 
         }
         }


 6) typedef in Dart
        
        // to ensure that the call fun will works correctly
        // s will receive only function that takes two parameter

      typedef operation (a,b);

      calc(a,b,operation s){
         s(a,b);
      }

  7] Generics in Dart

      
      class Cache<T> {
      final Map<String, T> _store = {};
      /*
      {
            "":T,
            "":T,
            "":T,
      }
      */
      void set(String key, T value) {
         _store[key] = value;
      }

      T? get(String key) {
         return _store[key];
      }
      }
      void main() {
      // كاش لتخزين نصوص
      var stringCache = Cache<String>();
      stringCache.set("username", "Mohamed");
      print(stringCache.get("username")); // Mohamed

      // كاش لتخزين أرقام
      var intCache = Cache<int>();
      intCache.set("score", 99);
      print(intCache.get("score")); // 99

      // كاش لتخزين كائنات مخصصة
      var userCache = Cache<User>();
      userCache.set("admin", User("Sara", 30));
      print(userCache.get("admin")?.name); // Sara
      }

      // كلاس مستخدم كمثال
      class User {
      final String name;
      final int age;

      User(this.name, this.age);
      }


      /*

      🔍 شرح الفكرة:

      - Cache<T> هو كلاس عام، النوع T بيتغير حسب الاستخدام.
      - لما تستخدم Cache<String>، الكاش بيقبل فقط String.
      - لما تستخدم Cache<User>, الكاش بيقبل فقط كائنات من نوع User.
      - ده بيخليك تكتب كود واحد، لكن تستخدمه مع أنواع مختلفة، بأمان وبدون تكرار.

      ---

      💡 ليه ده مفيد؟

      - يقلل التكرار في الكود.
      - يخلي الكود أكثر وضوحًا وتنظيمًا.
      - يمنع الأخطاء وقت الكتابة (compile time).
      - يسهل إعادة استخدام الكود في مشاريع مختلفة.

      ---

      لو حابب، ممكن نطوّر المثال ده ونخليه جزء من تطبيق Flutter، أو نضيف ميزات زي expiration 
      أو تخزين مؤقت. تحب نكمل؟
      */   